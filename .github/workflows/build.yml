name: Build and Package (secure)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

permissions:
  contents: write

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  package:
    name: Package for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install dependencies
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # runtime helpers for encrypted env + keychain
          pip install cryptography keyring python-dotenv

      - name: Optional tests (CI-only secrets; do not persist)
        if: ${{ secrets.DB_HOST != '' }}
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          IRONPDF_LICENSE_KEY: ${{ secrets.IRONPDF_LICENSE_KEY }}
        shell: bash
        run: |
          set -euo pipefail
          pytest -q || echo "Tests failed or skipped; continuing build (adjust as needed)."

      - name: Build application (PyInstaller example)
        # Replace this with your actual packager if different
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install pyinstaller
          pyinstaller --noconfirm --clean --name "SportsThreadApp" app/main.py

      - name: Create encrypted env from GitHub Secrets
        # Produces dist/.env.enc only; no plaintext secrets leave CI
        if: ${{ secrets.ENV_PASSPHRASE != '' }}
        shell: bash
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          IRONPDF_LICENSE_KEY: ${{ secrets.IRONPDF_LICENSE_KEY }}
          ENV_PASSPHRASE: ${{ secrets.ENV_PASSPHRASE }}
        run: |
          set -euo pipefail
          mkdir -p dist
          cat > dist/.env.plain <<'EOF'
DB_HOST=${DB_HOST}
DB_PORT=${DB_PORT}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DB_NAME=${DB_NAME}
IRONPDF_LICENSE_KEY=${IRONPDF_LICENSE_KEY}
EOF
          python - <<'PY'
import os, base64, json, pathlib
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.fernet import Fernet
from os import urandom

salt = urandom(16)
pwd = os.environ["ENV_PASSPHRASE"].encode()
kdf = PBKDF2HMAC(algorithm=hashes.SHA256(), length=32, salt=salt, iterations=200_000, backend=default_backend())
key = base64.urlsafe_b64encode(kdf.derive(pwd))
fernet = Fernet(key)
p = pathlib.Path("dist/.env.plain").read_bytes()
ct = fernet.encrypt(p)
payload = {"salt": base64.b64encode(salt).decode(), "ct": base64.b64encode(ct).decode()}
pathlib.Path("dist/.env.enc").write_text(json.dumps(payload))
PY
          # Securely delete plaintext; ignore if 'shred' unavailable
          (command -v shred && shred -u dist/.env.plain) || rm -f dist/.env.plain

      - name: Stage release files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p release
          # Copy packaged app output (PyInstaller creates ./dist/<name>/)
          cp -R dist/* release/ || true
          # Ship example env only (no secrets)
          if [ -f .env.example ]; then cp .env.example release/.env.example; fi
          # Helper scripts (no secrets)
          printf '%s\n' '#!/usr/bin/env bash' \
                          'set -euo pipefail' \
                          'cp -n .env.example .env 2>/dev/null || true' \
                          'echo "Edit .env with your creds (or rely on .env.enc flow)."' \
                          > release/setup_env.sh
          chmod +x release/setup_env.sh
          printf '%s\n' 'Write-Host "Creating local .env from .env.example if missing"' \
                          'Copy-Item -Path ".env.example" -Destination ".env" -ErrorAction SilentlyContinue' \
                          'Write-Host "Edit .env or use the built-in encrypted env (.env.enc)."' \
                          > release/setup_env.ps1

      - name: Upload artifact (no plaintext secrets)
        uses: actions/upload-artifact@v4
        with:
          name: sportsthread-app-${{ matrix.os }}
          path: release/**
          if-no-files-found: error
          retention-days: 7