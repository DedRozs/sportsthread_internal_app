name: Build App

on:
  push:
    branches:
      - "**"     # trigger on any branch while we validate
  workflow_dispatch: {}

permissions:
  contents: read

env:
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PYTHONUNBUFFERED: "1"

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-14]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # --- Create a .env for the build ONLY (not uploaded) ---
      # We DO NOT echo secret values to logs. We only write them to .env.
      - name: Create .env from repository secrets
        shell: bash
        run: |
          set -eu
          {
            echo "DB_HOST=${{ secrets.DB_HOST }}"
            echo "DB_NAME=${{ secrets.DB_NAME }}"
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
            echo "DB_PORT=${{ secrets.DB_PORT }}"
            echo "DB_USER=${{ secrets.DB_USER }}"
            echo "ENV_PASSPHRASE=${{ secrets.ENV_PASSPHRASE }}"
            echo "IRONPDF_LICENSE_KEY=${{ secrets.IRONPDF_LICENSE_KEY }}"
            echo "PDF_WARMUP=${{ secrets.PDF_WARMUP }}"
          } > .env
          chmod 600 .env || true
          echo "Wrote .env (contents hidden)."

      # --- Build executable(s) ---
      # Adjust entrypoint/path if your main module differs
      - name: Build with PyInstaller
        run: |
          pyinstaller app/main.py \
            --name sportsthread-internal-app \
            --onefile \
            --clean

      # --- Package build outputs ---
      - name: Show build outputs
        shell: bash
        run: |
          echo "Built files in ./dist:" && ls -la dist || true

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: sportsthread-internal-app-${{ matrix.os }}
          path: |
            dist/sportsthread-internal-app*
          if-no-files-found: error

      # NOTE: We intentionally DO NOT upload .env or any secret-bearing files
      # to artifacts for security. If you truly need a self-contained build,
      # consider an encrypted config strategy; we can add that in a follow-up.
